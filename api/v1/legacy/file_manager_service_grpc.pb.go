// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package legacy

import (
	context "context"
	v1 "github.com/llmariner/file-manager/api/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesWorkerServiceClient is the client API for FilesWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesWorkerServiceClient interface {
	GetFilePath(ctx context.Context, in *v1.GetFilePathRequest, opts ...grpc.CallOption) (*v1.GetFilePathResponse, error)
}

type filesWorkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesWorkerServiceClient(cc grpc.ClientConnInterface) FilesWorkerServiceClient {
	return &filesWorkerServiceClient{cc}
}

func (c *filesWorkerServiceClient) GetFilePath(ctx context.Context, in *v1.GetFilePathRequest, opts ...grpc.CallOption) (*v1.GetFilePathResponse, error) {
	out := new(v1.GetFilePathResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.files.server.v1.FilesWorkerService/GetFilePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesWorkerServiceServer is the server API for FilesWorkerService service.
// All implementations must embed UnimplementedFilesWorkerServiceServer
// for forward compatibility
type FilesWorkerServiceServer interface {
	GetFilePath(context.Context, *v1.GetFilePathRequest) (*v1.GetFilePathResponse, error)
	mustEmbedUnimplementedFilesWorkerServiceServer()
}

// UnimplementedFilesWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesWorkerServiceServer struct {
}

func (UnimplementedFilesWorkerServiceServer) GetFilePath(context.Context, *v1.GetFilePathRequest) (*v1.GetFilePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilePath not implemented")
}
func (UnimplementedFilesWorkerServiceServer) mustEmbedUnimplementedFilesWorkerServiceServer() {}

// UnsafeFilesWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesWorkerServiceServer will
// result in compilation errors.
type UnsafeFilesWorkerServiceServer interface {
	mustEmbedUnimplementedFilesWorkerServiceServer()
}

func RegisterFilesWorkerServiceServer(s grpc.ServiceRegistrar, srv FilesWorkerServiceServer) {
	s.RegisterService(&FilesWorkerService_ServiceDesc, srv)
}

func _FilesWorkerService_GetFilePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetFilePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesWorkerServiceServer).GetFilePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.files.server.v1.FilesWorkerService/GetFilePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesWorkerServiceServer).GetFilePath(ctx, req.(*v1.GetFilePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesWorkerService_ServiceDesc is the grpc.ServiceDesc for FilesWorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesWorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmoperator.files.server.v1.FilesWorkerService",
	HandlerType: (*FilesWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilePath",
			Handler:    _FilesWorkerService_GetFilePath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/legacy/file_manager_service.proto",
}
