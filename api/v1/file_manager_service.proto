syntax = "proto3";

package llmoperator.files.server.v1;

import "google/api/annotations.proto";

option go_package = "github.com/llm-operator/file-manager/api/v1";

// The API specification fllows OpenAPI API specification (https://platform.openai.com/docs/api-reference/files).
//
// TODO(kenji): Some of the API endpoints will not be implemented efficiently. Consider providing
// an extra API for just managing the metadata.

message CreateFileRequest {
  bytes file = 1;
  string purpose = 2;
}

message File {
  string id = 1;
  int64 bytes = 2;
  int64 created_at = 3;
  string filename = 4;
  string object = 5;
  string purpose = 6;
}

message ListFilesRequest {
  string purpose = 1;
}

message ListFilesResponse {
  string object = 1;
  repeated File data = 2;
}

message GetFileRequest {
  string id = 1;
}

message DeleteFileRequest {
  string id = 1;
}

message DeleteFileResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message GetFileContentRequest {
  string id = 1;
}

message GetFileContentResponse {
  // TODO(kenji): Revisit.  This does not follow the spec.
  bytes content = 1;
}

service FilesService {
  rpc CreateFile(CreateFileRequest) returns (File) {
    option (google.api.http) = {
      post: "/v1/files"
      body: "*"
    };
  }

  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
    option (google.api.http) = {
      get: "/v1/files"
    };
  }

  rpc GetFile(GetFileRequest) returns (File) {
    option (google.api.http) = {
      get: "/v1/files/{id}"
    };
  }

  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse) {
    option (google.api.http) = {
      delete: "/v1/files/{id}"
    };
  }

  rpc GetFileContent(GetFileContentRequest) returns (GetFileContentResponse) {
    option (google.api.http) = {
      delete: "/v1/files/{id}/content"
    };
  }
}
